{"version":3,"sources":["haapi.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","FrontRightLatch","RearRightLatch","FrontLeftLatch","RearLeftLatch","trunkLatchStatus","reqUnlock","oReq","XMLHttpRequest","addEventListener","open","send","reqLock","reqStart","reqTrunk","Tesla","mixer","animations","partA","partB","partC","partD","partE","gltf","useLoader","GLTFLoader","scene","scale","set","THREE","useFrame","state","delta","clipA","clipB","clipC","clipD","clipE","clipAction","paused","timeScale","setLoop","clampWhenFinished","play","update","position","object","Scene","intensity","fallback","App","useState","loading","setLoading","error","setError","useEffect","interval","setInterval","Promise","all","fetch","then","responses","map","response","json","data","catch","console","finally","clearInterval","src","logo","className","alt","id","onClick","camera","near","far","fov","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.88022076.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/haapi.ec1ec64c.svg\";","import * as THREE from \"three\";\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport { OrbitControls } from \"drei\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Canvas, useFrame, useLoader } from \"react-three-fiber\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport logo from \"./haapi.svg\"\n\n\nlet FrontRightLatch;\nlet RearRightLatch;\nlet FrontLeftLatch;\nlet RearLeftLatch;\nlet trunkLatchStatus;\n\n\nfunction reqUnlock () {\n  \n  var oReq = new XMLHttpRequest();\n  oReq.addEventListener(\"load\", reqUnlock);\n  oReq.open(\"GET\", \"http://sla.canbushack.com:5000/command/Unlock\");\n  oReq.send();\n  \n\n}\n\nfunction reqLock () {\n  var oReq = new XMLHttpRequest();\n  oReq.addEventListener(\"load\", reqLock);\n  oReq.open(\"GET\", \"http://sla.canbushack.com:5000/command/Lock\");\n  oReq.send();\n\n}\n\n\nfunction reqStart () {\n  var oReq = new XMLHttpRequest();\n  oReq.addEventListener(\"load\", reqStart);\n  oReq.open(\"GET\", \"http://sla.canbushack.com:5000/command/Start Vehicle\");\n  oReq.send();\n\n}\n\nfunction reqTrunk () {\n  var oReq = new XMLHttpRequest();\n  oReq.addEventListener(\"load\", reqTrunk);\n  oReq.open(\"GET\", \"http://sla.canbushack.com:5000/command/Trunk\");\n  oReq.send();\n\n}\n\n\nfunction Tesla() {\n  const gltf = useLoader(GLTFLoader, \"/tesla-w-animations.gltf\");\n  gltf.scene.scale.set(0.005, 0.005, 0.005)\n  \n  let mixer\n  let animations\n  let partA // FRONT RIGHT\n  let partB // REAR RIGHT \n  let partC // FRONT LEFT \n  let partD  // REAR LEFT\n  let partE // TRUNK \n  \n\n\n        animations = gltf.animations\n        mixer = new THREE.AnimationMixer(gltf.scene);\n        // console.log(animations)\n       \n    \n\n    useFrame((state, delta) => {\n\n      const clipA = animations[ 4 ] // FRONT RIGHT \n      const clipB = animations[ 5 ] // REAR RIGHT \n      const clipC = animations[ 2 ] // FRONT RIGHT \n      const clipD = animations[ 3 ] // REAR RIGHT \n      const clipE = animations[ 1 ] // TRUNK\n      \n\n      partA = mixer.clipAction(clipA)\n      if(FrontRightLatch === \"LATCH_OPENED\"){\n        partA.paused = false;\n        partA.timeScale = 1;\n        partA.setLoop(THREE.LoopOnce);\n        partA.clampWhenFinished = true;\n        partA.play()\n      }\n      else if(FrontRightLatch === \"LATCH_CLOSED\"){\n        partA.paused = false;\n        partA.timeScale = -1;\n        partA.setLoop(THREE.LoopOnce);\n        partA.clampWhenFinished = true;\n        partA.play()\n      }\n\n      partB = mixer.clipAction(clipB)\n      if(RearRightLatch === \"LATCH_OPENED\"){\n        partB.paused = false;\n        partB.timeScale = 1;\n        partB.setLoop(THREE.LoopOnce);\n        partB.clampWhenFinished = true;\n        partB.play()\n      }\n      else if(RearRightLatch === \"LATCH_CLOSED\"){\n        partB.paused = false;\n        partB.timeScale = -1;\n        partB.setLoop(THREE.LoopOnce);\n        partB.clampWhenFinished = true;\n        partB.play()\n      }\n\n      partC = mixer.clipAction(clipC)\n      if(FrontLeftLatch === \"LATCH_OPENED\"){\n        partC.paused = false;\n        partC.timeScale = 1;\n        partC.setLoop(THREE.LoopOnce);\n        partC.clampWhenFinished = true;\n        partC.play()\n      }\n      else if(FrontLeftLatch === \"LATCH_CLOSED\"){\n        partC.paused = false;\n        partC.timeScale = -1;\n        partC.setLoop(THREE.LoopOnce);\n        partC.clampWhenFinished = true;\n        partC.play()\n      }\n\n      partD = mixer.clipAction(clipD)\n      if(RearLeftLatch === \"LATCH_OPENED\"){\n        partD.paused = false;\n        partD.timeScale = 1;\n        partD.setLoop(THREE.LoopOnce);\n        partD.clampWhenFinished = true;\n        partD.play()\n      }\n      else if(RearLeftLatch === \"LATCH_CLOSED\"){\n        partD.paused = false;\n        partD.timeScale = -1;\n        partD.setLoop(THREE.LoopOnce);\n        partD.clampWhenFinished = true;\n        partD.play()\n      }\n\n      partE = mixer.clipAction(clipE)\n      if(trunkLatchStatus === \"LATCH_OPENED\"){\n        partE.paused = false;\n        partE.timeScale = 1;\n        partE.setLoop(THREE.LoopOnce);\n        partE.clampWhenFinished = true;\n        partE.play()\n      }\n      else if(trunkLatchStatus === \"LATCH_CLOSED\"){\n        partE.paused = false;\n        partE.timeScale = -1;\n        partE.setLoop(THREE.LoopOnce);\n        partE.clampWhenFinished = true;\n        partE.play()\n      }\n      \n\n      //Update\n        mixer.update(delta)\n    })\n\n  return <primitive position ={[0, 0, 0]} object={gltf.scene} />;\n}\n\n\nfunction Scene() {\n  return (\n    <>\n      <ambientLight />\n      <pointLight intensity={0.6} position={[0, 10, 4]} />\n      <Suspense fallback={null}>\n      \n        <Tesla />\n        \n      </Suspense>\n      <OrbitControls />\n\n      \n    </>\n  );\n}\n\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  \n  useEffect(() => {\n    \n    const interval = setInterval(() => {\n      // console.log('This will run every second!');\n   \n    \n\n    Promise.all([\n      fetch('http://live.canbushack.com/db_get/259/'), // Right Side Doors\n      fetch('http://live.canbushack.com/db_get/258/') // Left Side Doors\n\n      \n      \n  ]).then(function (responses) {\n      // Get a JSON object from each of the responses\n      return Promise.all(responses.map(function (response) {\n          return response.json() ;\n          \n          \n      }))\n  \n      \n  })\n\n  \n  \n  .then(function (data) {\n    FrontRightLatch = data[0]['VCRIGHT_frontLatchStatus']['enumerated_value']\n    RearRightLatch = data[0]['VCRIGHT_rearLatchStatus']['enumerated_value']\n    FrontLeftLatch = data[1]['VCLEFT_frontLatchStatus']['enumerated_value']\n    RearLeftLatch = data[1]['VCLEFT_rearLatchStatus']['enumerated_value']\n    trunkLatchStatus = data[0]['VCRIGHT_trunkLatchStatus']['enumerated_value']\n    // console.log(data)\n    \n  })\n\n\n\n    .catch((error) => {\n    console.error(\"Error fetching data: \", error);\n    setError(error);\n    })\n    .finally(() => {\n    setLoading(false);\n    })}, 1000);\n  \n    return () => clearInterval(interval);\n    }, []);\n    if (loading) return \"Application Loading...\";\n    if (error) return \"Error!\";\n\n    \n  \n\n return (\n    <>\n    \n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n    <div id=\"container-md\">\n    <button  className =\"btn btn-primary\" onClick={reqUnlock}>Unlock</button>\n    <button  className =\"btn btn-primary\" onClick={reqLock}>Lock</button>\n    <button  className =\"btn btn-primary\" onClick={reqStart}>Keyless Drive</button>\n    <button  className =\"btn btn-primary\" onClick={reqTrunk}>Trunk</button>\n\n  </div>\n      <Canvas \n       camera={{\n          position: [-5.10923594025578253, 2.3585518996952866, -5.686206208293889],\n          near: 0.5,\n          far: 2000,\n          fov: 25,\n\n         \n         \n        }}\n        >\n   \n       \n        <Scene />\n      </Canvas>\n\n    \n     </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}